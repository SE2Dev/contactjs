"use strict";const DIRECTION_NONE="0",DIRECTION_LEFT="left",DIRECTION_RIGHT="right",DIRECTION_UP="up",DIRECTION_DOWN="down",DIRECTION_CLOCKWISE=1,DIRECTION_COUNTER_CLOCKWISE=-1,DIRECTION_HORIZONTAL=[DIRECTION_LEFT,DIRECTION_RIGHT],DIRECTION_VERTICAL=[DIRECTION_UP,DIRECTION_DOWN],DIRECTION_ALL=[DIRECTION_LEFT,DIRECTION_RIGHT,DIRECTION_UP,DIRECTION_DOWN],GESTURE_STATE_POSSIBLE="possible",GESTURE_STATE_BLOCKED="blocked";class Contact{constructor(e){this.DEBUG=!1,this.pointerInputs={},this.activePointerInputs={},this.primaryPointerId=e.pointerId,this.initialPointerEvent=e,this.currentPointerEvent=e,this.addPointer(e),this.isActive=!0,this.startTimestamp=e.timeStamp,this.currentTimestamp=this.startTimestamp,this.endTimestamp=null,this.multipointer={liveParameters:{centerMovement:null,centerMovementVector:null,distanceChange:null,relativeDistanceChange:null,rotationAngle:null,vectorAngle:null},globalParameters:{centerMovement:null,centerMovementVector:null,distanceChange:null,relativeDistanceChange:null,rotationAngle:null,vectorAngle:null}}}addPointer(e){this.currentPointerEvent=e;var t=new PointerInput(e);this.pointerInputs[e.pointerId]=t,this.activePointerInputs[e.pointerId]=t}removePointer(e){delete this.activePointerInputs[e]}getPointerInput(e){if(Object.prototype.hasOwnProperty.call(this.pointers,e)){return this.pointers[e]}throw new Error("invalid pointerId: "+e+". Pointer not found in Contact.pointers")}getPrimaryPointerInput(){return this.pointerInputs[this.primaryPointerId]}getMultiPointerInputs(){var e=Object.keys(this.activePointerInputs)[0],t=this.activePointerInputs[e],i=Object.keys(this.activePointerInputs)[1];return[t,this.activePointerInputs[i]]}onPointerMove(e){this.currentPointerEvent=e,this.currentTimestamp=e.timeStamp,this.pointerInputs[e.pointerId].onMove(e),!0===this.DEBUG&&console.log(this.pointerInputs),this.updateState()}onPointerUp(e){var t=e.pointerId;this.currentPointerEvent=e,this.currentTimestamp=e.timeStamp,this.pointerInputs[t].onUp(e),this.removePointer(t),this.updateState()}onPointerCancel(e){this.onPointerUp(e),1==this.DEBUG&&console.log("[Contact] pointercancel detected")}onPointerLeave(e){this.onPointerUp(e),1==this.DEBUG&&console.log("[Contact] pointerleave detected")}onIdle(){for(let e in this.activePointerInputs){this.activePointerInputs[e].onIdle()}}updateState(){var e=!1;Object.keys(this.activePointerInputs).length>0&&(e=!0),this.isActive=e,0==this.isActive?this.endTimestamp=this.currentTimestamp:Object.keys(this.activePointerInputs).length>=2&&this.updateMultipointerParameters()}updateMultipointerParameters(){var e=this.getMultiPointerInputs(),t=e[0],i=e[1],n=t.liveParameters.vector,r=i.liveParameters.vector;if(null!=n&&null!=r){var s=getCenter(n.startPoint,r.startPoint);this.multipointer.liveParameters.center=s;var a=this.calculateCenterMovement(n,r);this.multipointer.liveParameters.centerMovementVector=a,this.multipointer.liveParameters.centerMovement=a.vectorLength;var o=this.calculateDistanceChange(n,r);this.multipointer.liveParameters.distanceChange=o.absolute,this.multipointer.liveParameters.relativeDistanceChange=o.relative;var l=this.calculateRotationAngle(n,r);this.multipointer.liveParameters.rotationAngle=l;var c=this.calculateVectorAngle(n,r);this.multipointer.liveParameters.vectorAngle=c}var h=t.globalParameters.vector,u=i.globalParameters.vector;if(null!=h&&null!=u){var v=getCenter(h.startPoint,u.startPoint);this.multipointer.globalParameters.center=v;var p=this.calculateCenterMovement(h,u);this.multipointer.globalParameters.centerMovementVector=p,this.multipointer.globalParameters.centerMovement=p.vectorLength;var d=this.calculateDistanceChange(h,u);this.multipointer.globalParameters.distanceChange=d.absolute,this.multipointer.globalParameters.relativeDistanceChange=d.relative;var m=this.calculateRotationAngle(h,u);this.multipointer.globalParameters.rotationAngle=m;var P=this.calculateVectorAngle(h,u);this.multipointer.liveParameters.vectorAngle=P}!0===this.DEBUG&&(console.log("[Contact] 2 fingers: centerMovement between pointer #"+pointerId_1+" and pointer #"+pointerId_2+" : "+this.multipointer.liveParameters.centerMovement+"px"),console.log("[Contact] 2 fingers: distanceChange: between pointer #"+pointerId_1+" and pointer #"+pointerId_2+" : "+this.multipointer.liveParameters.distanceChange+"px"),console.log("[Contact] 2 fingers live angle: "+this.multipointer.liveParameters.rotationAngle+"deg"),console.log("[Contact] 2 fingers global angle: "+this.multipointer.globalParameters.rotationAngle+"deg"))}calculateCenterMovement(e,t){var i=getCenter(e.startPoint,t.startPoint),n=getCenter(e.endPoint,t.endPoint);return new Vector(i,n)}calculateDistanceChange(e,t){var i=new Vector(e.startPoint,t.startPoint),n=new Vector(e.endPoint,t.endPoint);return{absolute:n.vectorLength-i.vectorLength,relative:n.vectorLength/i.vectorLength}}calculateRotationAngle(e,t){var i=new Vector(e.startPoint,t.startPoint),n=new Vector(e.endPoint,t.endPoint),r=new Point(0,0),s=new Vector(i.startPoint,r),a=translatePoint(i.endPoint,s),o=new Vector(n.startPoint,r),l=translatePoint(n.endPoint,o),c=-1*calcAngleRad(a),h=l.x*Math.cos(c)-l.y*Math.sin(c),u=Math.round(l.x*Math.sin(c)+l.y*Math.cos(c));return 180*Math.atan2(u,h)/Math.PI}calculateVectorAngle(e,t){var i=null;if(e.vectorLength>0&&t.vectorLength>0){var n=(e.x*t.x+e.y*t.y)/(e.vectorLength*t.vectorLength);i=rad2deg(Math.acos(n))}return i}}class PointerInput{constructor(e,t){this.DEBUG=!1,t=t||{};var i=(new Date).getTime();this.pointerId=e.pointerId;var n=Object.prototype.hasOwnProperty.call(t,"vectorTimespan");this.vectorTimespan=1==n?t.vectorTimespan:100,this.initialPointerEvent=e,this.currentPointerEvent=e,this.recognizedEvents=[e],this.canceled=!1,this.isActive=!0;var r=this.getVector(e,e);this.liveParameters={vector:r,speed:0,isMoving:!1},this.globalParameters={startX:this.initialPointerEvent.clientX,startY:this.initialPointerEvent.clientY,vector:r,deltaX:0,deltaY:0,startTimestampUTC:i,startTimestamp:this.initialPointerEvent.timeStamp,currentTimestamp:this.initialPointerEvent.timeStamp,endTimestamp:null,maximumSpeed:0,averageSpeed:0,finalSpeed:null,traveledDistance:0,hasBeenMoved:!1,duration:0}}onIdle(){let e=(new Date).getTime()-this.globalParameters.startTimestampUTC;this.globalParameters.duration=e}onMove(e){this.globalParameters.hasBeenMoved=!0,this.liveParameters.isMoving=!0,this.update(e,!0)}onUp(e){this.globalParameters.finalSpeed=this.liveParameters.speed,this.liveParameters.currentSpeed=0,this.liveParameters.isMoving=!1,this.isActive=!1,this.globalParameters.endTimestamp=e.timeStamp,this.update(e),!0===this.DEBUG&&console.log("[Contact] pointerdown ended. pointerdown duration: "+this.globalParameters.duration+"ms")}onCancel(e){this.update(e),this.liveParameters.speed=0,this.canceled=!0,this.liveParameters.isMoving=!1,this.isActive=!1,this.globalParameters.endTimestamp=e.timeStamp,!0===this.DEBUG&&console.log("[Contact] canceled, pointerdown duration:"+this.duration)}update(e){this.currentPointerEvent=e,this.recognizedEvents.push(e);var t=this.getTimedPointerEvents(),i=this.getVector(t[0],t[1]);if(this.liveParameters.vector=i,null!=i){this.liveParameters.speed=this.getSpeed(i,t[0].timeStamp,t[1].timeStamp),this.liveParameters.speed>this.globalParameters.maximumSpeed&&(this.globalParameters.maximumSpeed=this.liveParameters.speed),this.globalParameters.currentTimestamp=e.timeStamp,this.globalParameters.duration=e.timeStamp-this.globalParameters.startTimestamp,this.globalParameters.deltaX=i.endPoint.x-this.globalParameters.startX,this.globalParameters.deltaY=i.endPoint.y-this.globalParameters.startY;var n=this.getVector(this.initialPointerEvent,this.currentPointerEvent);this.globalParameters.vector=n,!0===this.DEBUG&&(console.log("[Contact] current speed: "+this.liveParameters.speed+"px/s"),console.log("[Contact] pointerdown duration: "+this.globalParameters.duration+"ms"),console.log("[Contact] live vector length within vectorTimespan: "+this.liveParameters.vector.vectorLength+"px"))}}getTimedPointerEvents(){for(var e=this.initialPointerEvent,t=this.recognizedEvents[this.recognizedEvents.length-1],i=this.recognizedEvents.length-1,n=0,r=t.timeStamp;n<this.vectorTimespan&&!((i-=1)<0);)n=r-(e=this.recognizedEvents[i]).timeStamp;var s=[e,t];return this.recognizedEvents=this.recognizedEvents.slice(-20),s}getVector(e,t){var i=null;if(null!=e&&null!=t){let n=new Point(e.clientX,e.clientY),r=new Point(t.clientX,t.clientY);i=new Vector(n,r)}return i}getSpeed(e,t,i){!0===this.DEBUG&&(console.log("[PointerInput vector] "+e),console.log("[PointerInput startTimestamp] "+t),console.log("[PointerInput endTimestamp] "+i));var n=0,r=(i-t)/1e3;return null!=e&&0!=r&&(n=e.vectorLength/r),n}}class Point{constructor(e,t){this.x=e,this.y=t}}class Vector{constructor(e,t){this.startPoint=e,this.endPoint=t,this.direction=DIRECTION_NONE,this.deltaX=this.endPoint.x-this.startPoint.x,this.deltaY=this.endPoint.y-this.startPoint.y,this.x=this.deltaX,this.y=this.deltaY,this.vectorLength=Math.sqrt(Math.pow(this.deltaX,2)+Math.pow(this.deltaY,2)),Math.abs(this.deltaX)>Math.abs(this.deltaY)?this.startPoint.x<this.endPoint.x?this.direction=DIRECTION_RIGHT:this.direction=DIRECTION_LEFT:this.startPoint.y<this.endPoint.y?this.direction=DIRECTION_UP:this.direction=DIRECTION_DOWN}}function deg2rad(e){return Math.PI/180*e}function rad2deg(e){return e/(Math.PI/180)}function getCenter(e,t){var i=(e.x+t.x)/2,n=(e.y+t.y)/2;return new Point(i,n)}function translatePoint(e,t){var i=e.x+t.x,n=e.y+t.y;return new Point(i,n)}function calcAngleDegrees(e){var t=180*Math.atan2(e.y,e.x)/Math.PI;return t<0&&(t=360+t),t}function calcAngleRad(e){var t=Math.atan2(e.y,e.x);return t<0&&(t=2*Math.PI+t),t}class Gesture{constructor(e,t){this.DEBUG=!0,this.domElement=e,this.isActive=!1,this.state=GESTURE_STATE_POSSIBLE,this.initialPointerEvent=null,this.boolParameters={requiresPointerMove:null,requiresActivePointer:null},this.initialMinMaxParameters={pointerCount:[null,null],duration:[null,null],currentSpeed:[null,null],averageSpeed:[null,null],finalSpeed:[null,null],distance:[null,null]},this.activeStateMinMaxParameters={pointerCount:[null,null],duration:[null,null],currentSpeed:[null,null],averageSpeed:[null,null],finalSpeed:[null,null],distance:[null,null]};let i={bubbles:!0};this.options=t||{};for(let e in i)e in this.options||(this.options[e]=i[e])}validateMinMax(e,t,i){var n=e[t][0],r=e[t][1];return 1==this.DEBUG&&console.log("[Gestures] checking "+t+"[gesture.isActive: "+this.isActive.toString()+"] minValue: "+n+", maxValue: "+r+", current value: "+i),null!=n&&null!=i&&i<n?(1==this.DEBUG&&console.log("dismissing min"+this.constructor.name+": required "+t+": "+n+", current value: "+i),!1):!(null!=r&&null!=i&&i>r)||(1==this.DEBUG&&console.log("dismissing max"+this.constructor.name+": required "+t+": "+r+", current value: "+i),!1)}validateBool(e,t){var i=this.boolParameters[e];return null!=i&&null!=t&&i===t||(null==i||(1==this.DEBUG&&console.log("[Gestures] dismissing "+this.constructor.name+": "+e+" required: "+i+", actual value: "+t),!1))}getMinMaxParameters(e){var t=e.getPrimaryPointerInput();return{pointerCount:Object.keys(e.activePointerInputs).length,duration:t.globalParameters.duration,currentSpeed:t.liveParameters.speed,averageSpeed:t.globalParameters.averageSpeed,finalSpeed:t.globalParameters.finalSpeed,distance:t.liveParameters.vector.vectorLength}}getBoolParameters(e){var t=e.getPrimaryPointerInput();return{requiresPointerUp:!1===t.isActive,requiresActivePointer:!0===t.isActive,requiresPointerMove:!0===t.globalParameters.hasBeenMoved}}validate(e){var t=e.getPrimaryPointerInput();1==this.DEBUG&&console.log("[Gestures] running recognition for "+this.constructor.name);var i=this.getBoolParameters(e);for(let e in this.boolParameters){let t=i[e];if(0==this.validateBool(e,t))return!1}var n,r=this.getMinMaxParameters(e);n=1==this.isActive?this.activeStateMinMaxParameters:this.initialMinMaxParameters;for(let e in n){let t=r[e];if(0==this.validateMinMax(n,e,t))return!1}return!(1==Object.prototype.hasOwnProperty.call(this.options,"supportedDirections")&&this.options.supportedDirections.length>0&&-1==this.options.supportedDirections.indexOf(t.liveParameters.vector.direction))||(1==this.DEBUG&&console.log("[Gestures] dismissing "+this.constructor.name+": supported directions: "+this.options.supportedDirections+", current direction: "+t.liveParameters.vector.direction),!1)}recognize(e){var t=this.validate(e);1==t&&0==this.isActive&&this.onStart(e),1==t&&this.state==GESTURE_STATE_POSSIBLE?this.emit(e):1==this.isActive&&0==t&&this.onEnd(e)}getEventData(e){return{contact:e,recognizer:this}}emit(e,t){t=t||this.constructor.name.toLowerCase(),!0===this.DEBUG&&console.log("[Gestures] detected and firing event "+t);var i=this.getEventData(e),n={detail:i,bubbles:this.options.bubbles},r=new CustomEvent(t,n),s=e.initialPointerEvent.target;1==n.bubbles?s.dispatchEvent(r):this.domElement.dispatchEvent(r);var a=i.live.direction;if(1==Object.prototype.hasOwnProperty.call(this.options,"supportedDirections"))for(let e=0;e<this.options.supportedDirections.length;e++){let i=this.options.supportedDirections[e];if(i==a){let e=t+i;1==this.DEBUG&&console.log("[Gestures] detected and firing event "+e);let r=new CustomEvent(e,n);1==n.bubbles?s.dispatchEvent(r):this.domElement.dispatchEvent(r)}}}onStart(e){this.isActive=!0,this.initialPointerEvent=e.currentPointerEvent;var t=this.constructor.name.toLowerCase()+"start";!0===this.DEBUG&&console.log("[Gestures] firing event: "+t);var i=this.getEventData(e),n=new CustomEvent(t,{detail:i});this.domElement.dispatchEvent(n)}onEnd(e){this.isActive=!1;var t=this.constructor.name.toLowerCase()+"end";!0===this.DEBUG&&console.log("[Gestures] firing event: "+t);let i=this.getEventData(e);var n=new CustomEvent(t,{detail:i});this.domElement.dispatchEvent(n)}onTouchStart(){}onTouchMove(){}onTouchEnd(){}onTouchCancel(){}}class SinglePointerGesture extends Gesture{constructor(e,t){super(e,t=t||{})}getEventData(e){var t=super.getEventData(e),i=e.getPrimaryPointerInput(),n=new Point(this.initialPointerEvent.clientX,this.initialPointerEvent.clientY),r=new Point(e.currentPointerEvent.clientX,e.currentPointerEvent.clientY),s=new Vector(n,r),a=e.currentPointerEvent.timeStamp-this.initialPointerEvent.timeStamp;return t.global={deltaX:s.x,deltaY:s.y,distance:s.vectorLength,speedX:s.x/a,speedY:s.y/a,speed:s.vectorLength/a,direction:s.direction,scale:1,rotation:0,srcEvent:e.currentPointerEvent},t.live={deltaX:i.liveParameters.vector.x,deltaY:i.liveParameters.vector.y,distance:i.liveParameters.vector.vectorLength,speedX:i.liveParameters.vector.x/e.vectorTimespan,speedY:i.liveParameters.vector.y/e.vectorTimespan,speed:i.liveParameters.speed,direction:i.liveParameters.vector.direction,scale:1,rotation:0,center:{x:i.liveParameters.vector.endPoint.x,y:i.liveParameters.vector.endPoint.y},srcEvent:e.currentPointerEvent},t}}class Pan extends SinglePointerGesture{constructor(e,t){super(e,t=t||{}),this.initialMinMaxParameters.pointerCount=[1,1],this.initialMinMaxParameters.duration=[0,null],this.initialMinMaxParameters.distance=[20,null],this.activeStateMinMaxParameters.pointerCount=[1,1],this.boolParameters.requiresPointerMove=!0,this.boolParameters.requiresActivePointer=!0,this.swipeFinalSpeed=600,this.isSwipe=!1,this.initialSupportedDirections=DIRECTION_ALL,Object.prototype.hasOwnProperty.call(t,"supportedDirections")?this.initialSupportedDirections=t.supportedDirections:this.options.supportedDirections=DIRECTION_ALL}validate(e){return 1==this.isActive&&(this.options.supportedDirections=DIRECTION_ALL),super.validate(e)}onStart(e){this.isSwipe=!1,super.onStart(e)}onEnd(e){var t=e.getPrimaryPointerInput();this.swipeFinalSpeed<t.globalParameters.finalSpeed&&(this.isSwipe=!0,this.emit(e,"swipe")),super.onEnd(e),this.options.supportedDirections=this.initialSupportedDirections}onTouchMove(e){1==this.isActive&&(1==this.DEBUG&&console.log("[Pan] preventing touchmove default"),e.preventDefault(),e.stopPropagation())}}class Tap extends SinglePointerGesture{constructor(e,t){super(e,t=t||{}),this.initialMinMaxParameters.pointerCount=[0,0],this.initialMinMaxParameters.duration=[0,200],this.initialMinMaxParameters.distance=[null,30],this.boolParameters.requiresPointerMove=null,this.boolParameters.requiresActivePointer=!1}onStart(e){this.initialPointerEvent=e.currentPointerEvent}}class Press extends SinglePointerGesture{constructor(e,t){super(e,t=t||{}),this.initialMinMaxParameters.pointerCount=[1,1],this.initialMinMaxParameters.duration=[600,null],this.initialMinMaxParameters.distance=[null,30],this.boolParameters.requiresPointerMove=null,this.boolParameters.requiresActivePointer=!0,this.hasBeenEmitted=!1}getMinMaxParameters(e){var t=super.getMinMaxParameters(e),i=e.getPrimaryPointerInput();return t.distance=i.globalParameters.vector.vectorLength,t}recognize(e){if(1==this.validate(e)&&0==this.hasBeenEmitted)this.initialPointerEvent=e.currentPointerEvent,this.emit(e),this.hasBeenEmitted=!0;else{let t=e.getPrimaryPointerInput().globalParameters.duration;1==this.hasBeenEmitted&&t<=this.initialMinMaxParameters.duration[0]&&(this.hasBeenEmitted=!1)}}}class MultiPointerGesture extends Gesture{constructor(e,t){super(e,t=t||{}),this.boolParameters={requiresPointerMove:null,requiresActivePointer:null},this.initialMinMaxParameters={pointerCount:[2,null]},this.activeStateMinMaxParameters={pointerCount:[2,null]},this.options=t||{}}}class TwoPointerGesture extends MultiPointerGesture{constructor(e,t){super(e,t=t||{}),this.boolParameters.requiresPointerMove=!0,this.boolParameters.requiresActivePointer=!0,this.initialMinMaxParameters.pointerCount=[2,2],this.initialMinMaxParameters.centerMovement=[null,null],this.initialMinMaxParameters.distanceChange=[null,null],this.initialMinMaxParameters.rotationAngle=[null,null],this.initialMinMaxParameters.vectorAngle=[null,null],this.activeStateMinMaxParameters.pointerCount=[2,2],this.activeStateMinMaxParameters.centerMovement=[null,null],this.activeStateMinMaxParameters.distanceChange=[null,null],this.activeStateMinMaxParameters.rotationAngle=[null,null],this.activeStateMinMaxParameters.vectorAngle=[null,null]}getMinMaxParameters(e){var t=super.getMinMaxParameters(e);return t.centerMovement=e.multipointer.liveParameters.centerMovement,t.distanceChange=Math.abs(e.multipointer.liveParameters.distanceChange),t.rotationAngle=Math.abs(e.multipointer.liveParameters.rotationAngle),t.vectorAngle=e.multipointer.liveParameters.vectorAngle,t}getEventData(e){var t=super.getEventData(e),i=e.currentPointerEvent.timeStamp-this.initialPointerEvent.timeStamp,n=e.multipointer.globalParameters,r=e.multipointer.liveParameters;return t.global={deltaX:n.centerMovementVector.x,deltaY:n.centerMovementVector.y,distance:n.centerMovement,speedX:n.centerMovementVector.x/i,speedY:n.centerMovementVector.y/i,speed:n.centerMovementVector.vectorLength/i,direction:n.centerMovementVector.direction,scale:n.relativeDistanceChange,rotation:n.rotationAngle,srcEvent:e.currentPointerEvent},t.live={deltaX:r.centerMovementVector.x,deltaY:r.centerMovementVector.y,distance:r.centerMovement,speedX:r.centerMovementVector.x/i,speedY:r.centerMovementVector.y/i,speed:r.centerMovementVector.vectorLength/i,direction:r.centerMovementVector.direction,scale:r.relativeDistanceChange,rotation:r.rotationAngle,center:{x:r.centerMovementVector.startPoint.x,y:r.centerMovementVector.startPoint.y},srcEvent:e.currentPointerEvent},t}}class Pinch extends TwoPointerGesture{constructor(e,t){super(e,t=t||{}),this.initialMinMaxParameters.centerMovement=[0,50],this.initialMinMaxParameters.distanceChange=[5,null],this.initialMinMaxParameters.rotationAngle=[null,20],this.initialMinMaxParameters.vectorAngle=[10,null],this.activeStateMinMaxParameters.vectorAngle=[20,null]}}class Rotate extends TwoPointerGesture{constructor(e,t){super(e,t=t||{}),this.initialMinMaxParameters.centerMovement=[0,50],this.initialMinMaxParameters.distanceChange=[null,50],this.initialMinMaxParameters.rotationAngle=[5,null]}}class TwoFingerPan extends TwoPointerGesture{constructor(e,t){super(e,t=t||{}),this.initialMinMaxParameters.centerMovement=[2,null],this.initialMinMaxParameters.distanceChange=[null,50],this.initialMinMaxParameters.rotationAngle=[null,null],this.initialMinMaxParameters.vectorAngle=[null,150],this.activeStateMinMaxParameters.vectorAngle=[null,150],this.activeStateMinMaxParameters.distanceChange=[null,5]}}var ALL_GESTURE_CLASSES=[Tap,Press,Pan,Pinch,Rotate,TwoFingerPan];class PointerListener{constructor(e,t){this.DEBUG=!1;this.eventHandlers={},this.lastRecognitionTimestamp=null,this.idleRecognitionIntervalId=null,this.pointerEventHandlers={},this.touchEventHandlers={},t=t||{},this.options={bubbles:!0};for(let e in t)"supportedGestures"!=e&&(this.options[e]=t[e]);var i=ALL_GESTURE_CLASSES,n=[];1==Object.prototype.hasOwnProperty.call(t,"supportedGestures")&&(i=t.supportedGestures);for(let t=0;t<i.length;t++){let r,s=i[t],a={bubbles:this.options.bubbles};if("function"==typeof s)r=new s(e,a);else{if("object"!=typeof s)throw new Error("unsupported gesture type: "+typeof s);r=s}n.push(r)}this.options.supportedGestures=n,this.domElement=e,this.contact=null,this.addPointerListeners(),this.addTouchListeners()}addPointerListeners(){var e=this,t=this.domElement,i=function(i){t.setPointerCapture(i.pointerId),null==e.contact||0==e.contact.isActive?e.contact=new Contact(i):e.contact.addPointer(i),1==Object.prototype.hasOwnProperty.call(e.options,"pointerdown")&&e.options.pointerdown(i,e),null!=e.idleRecognitionIntervalId&&e.clearIdleRecognitionInterval(),e.idleRecognitionIntervalId=setInterval(function(){e.onIdle()},100)},n=function(t){null!=e.contact&&1==e.contact.isActive&&(e.contact.onPointerMove(t),e.recognizeGestures(),1==Object.prototype.hasOwnProperty.call(e.options,"pointermove")&&e.options.pointermove(t,e))},r=function(i){(t.releasePointerCapture(i.pointerId),null!=e.contact&&1==e.contact.isActive)&&(e.contact.onPointerUp(i),e.recognizeGestures(),1==Object.prototype.hasOwnProperty.call(e.options,"pointerup")&&e.options.pointerup(i,e));e.clearIdleRecognitionInterval()},s=function(t){null!=e.contact&&1==e.contact.isActive&&(e.contact.onPointerLeave(t),e.recognizeGestures()),e.clearIdleRecognitionInterval()},a=function(i){t.releasePointerCapture(i.pointerId),1==this.DEBUG&&console.log("[PointerListener] pointercancel detected"),e.contact.onPointerCancel(i),e.recognizeGestures(),e.clearIdleRecognitionInterval(),1==Object.prototype.hasOwnProperty.call(e.options,"pointercancel")&&e.options.pointercancel(i,e)};t.addEventListener("pointerdown",i,{passive:!0}),t.addEventListener("pointermove",n,{passive:!0}),t.addEventListener("pointerup",r,{passive:!0}),t.addEventListener("pointerleave",s,{passive:!0}),t.addEventListener("pointercancel",a,{passive:!0}),this.pointerEventHandlers={pointerdown:i,pointermove:n,pointerup:r,pointerleave:s,pointercancel:a}}removePointerListeners(){for(let e in this.pointerEventHandlers){let t=this.pointerEventHandlers[e];this.domElement.removeEventListener(e,t)}}addTouchListeners(){var e=this;if(1==e.options.handleTouchEvents){this.domElement.addEventListener("touchmove",function(t){for(let i=0;i<e.options.supportedGestures.length;i++)e.options.supportedGestures[i].onTouchMove(t)}),this.touchEventHandlers={touchmove:onTouchmove}}}removeTouchListeners(){for(let e in this.touchEventHandlers){let t=this.touchEventHandlers[e];this.domElement.removeEventListener(e,t)}}onIdle(){if(1==this.DEBUG&&console.log("[PointerListener] onIdle"),null==this.contact||0==this.contact.isActive)this.clearIdleRecognitionInterval();else{let e=(new Date).getTime(),t=null;null!=this.lastRecognitionTimestamp&&(t=e-this.lastRecognitionTimestamp),(null==t||t>100)&&(this.contact.onIdle(),1==this.DEBUG&&console.log("[PointerListener] run idle recognition"),this.recognizeGestures())}}clearIdleRecognitionInterval(){null!=this.idleRecognitionIntervalId&&(clearInterval(this.idleRecognitionIntervalId),this.idleRecognitionIntervalId=null)}recognizeGestures(){this.lastRecognitionTimestamp=(new Date).getTime();for(let e=0;e<this.options.supportedGestures.length;e++){this.options.supportedGestures[e].recognize(this.contact)}}parseEventsString(e){return e.trim().split(/\s+/g)}on(e,t,i){let n=this.parseEventsString(evensString);for(let e=0;e<n.length;e++){let i=n[e];!i in self.eventHandlers&&(this.eventHandlers[i]=[]),-1==this.eventHandlers[i].indexOf(t)&&this.eventHandlers[i].push(t),this.domElement.addEventListener(eventType,t,!1)}}off(e,t){let i=this.parseEventsString(evensString);for(let e=0;e<i.length;e++){let n=i[e];if(n in this.eventHandlers){let e=this.eventHandlers[n].indexOf(t);e>=0&&this.eventHandlers[n].splice(e,1)}this.domElement.removeEventListener(eventType,t,!1)}}destroy(){for(let e in this.eventHandlers){let t=this.eventHandlers[e];for(let i=0;i<t.length;i++){let n=t[i];this.domElement.removeEventListener(e,n)}delete this.eventHandlers[e]}this.removePointerListeners(),this.removeTouchListeners()}}